lua_shared_dict queue 10m;

server {
    listen       80;
    server_name  localhost;

    resolver 127.0.0.11;

    # https://github.com/w3c/trace-context/tree/main/test#implement-test-service
    location /test/e2e/trace-context {
        content_by_lua_block {
            local tp = require("opentelemetry.trace.tracer_provider").new()
            local tracer = tp:tracer("opentelemetry-lua")
            local context_storage = require("opentelemetry.context_storage")
            local context = require("opentelemetry.context").new(context_storage)
            local trace_context = require("opentelemetry.trace.propagation.trace_context")
            local carrier = require("opentelemetry.trace.propagation.carrier").new()
            local http = require("resty.http")
            local cjson = require("cjson.safe")

            ngx.req.read_body()
            local test_cases = cjson.decode(ngx.req.get_body_data())
            for _, case in ipairs(test_cases) do
                local httpc = http.new()
                httpc:set_timeout(3000)

                local context, span = tracer:start(trace_context.extract(context, carrier), "e2e")

                local headers_carrier = {
                    headers = {
                        ["Content-Type"] = "application/json",
                    },
                    set = function(self, name, val)
                        self.headers[name] = val
                    end
                }
                trace_context.inject(context, headers_carrier)

                local res, err = httpc:request_uri(case.url, {
                    method = "POST",
                    headers = headers_carrier.headers,
                    body = cjson.encode(case.arguments),
                })
                if not res then
                    ngx.log(ngx.ERR, "request failed: ", err)
                    httpc:close()
                    return 500
                end
                if res.status ~= 200  then
                    ngx.log(ngx.ERR, "request failed: ", res.body)
                    httpc:close()
                    return 500
                end
                httpc:close()
                span:finish()
            end
            return 200
        }
    }

    location /test/e2e {
        access_by_lua_block {
            local tracer_provider_new = require("opentelemetry.trace.tracer_provider").new
            local batch_span_processor_new = require("opentelemetry.trace.batch_span_processor").new
            local span_kind = require("opentelemetry.trace.span_kind")
            local otlp_exporter_new = require("opentelemetry.trace.exporter.otlp").new
            local resource_new = require("opentelemetry.resource").new
            local attr = require("opentelemetry.attribute")
            local context_storage = require("opentelemetry.context_storage")
            local context = require("opentelemetry.context").new(context_storage)
            local trace_context = require("opentelemetry.trace.propagation.trace_context")
            local carrier_new = require("opentelemetry.trace.propagation.carrier").new
            local exporter_client_new = require("opentelemetry.trace.exporter.http_client").new

            -- create exporter
            local exporter = otlp_exporter_new(exporter_client_new("otel-collector:4317", 3))
            -- create span processor
            local batch_span_processor = batch_span_processor_new(exporter)
            -- create tracer provider
            local tp = tracer_provider_new(batch_span_processor,
                    {resource = resource_new(attr.string("service.name", "openresty"), attr.int("attr_int", 100))})
            -- create tracer
            local tracer = tp:tracer("opentelemetry-lua")

            local carrier = carrier_new()
            -- extract trace context from the headers of downstream HTTP request
            context = trace_context.extract(context, carrier)

            local context, span = tracer:start(context, "access_by_lua_block", {
                kind = span_kind.internal,
                attributes = {attr.double("attr_double", 10.24), attr.bool("attr_bool", true)},
            })
            context:attach()

            -- inject trace context into the headers of upstream HTTP request
            trace_context.inject(context, carrier)
        }

        proxy_pass http://test-server:80;

        header_filter_by_lua_block {
            local context_storage = require("opentelemetry.context_storage")
            local context = require("opentelemetry.context").new(context_storage)
            local span_status = require("opentelemetry.trace.span_status")
            local attr = require("opentelemetry.attribute")

            -- get tracer from current context
            local tracer = context:current():span():tracer_provider():tracer("opentelemetry-lua")

            local context, sub_span = tracer:start(context:current(), "header_filter_by_lua_block")
            sub_span:record_error("this is err")
            sub_span:set_status(span_status.error, "set status err")
            sub_span:add_event("event1", {attributes = {attr.string("attr_string", "attr_value")}})
            sub_span:finish();
        }

        log_by_lua_block {
            local context_storage = require("opentelemetry.context_storage")
            local context = require("opentelemetry.context").new(context_storage)
            -- get span from current context
            context:current():span():finish()
        }
    }
    location /test/e2e-shd {
        access_by_lua_block {
            local tracer_provider_new = require("opentelemetry.trace.tracer_provider").new
            local batch_span_processor_new = require("opentelemetry.trace.batch_span_processor").new
            local span_kind = require("opentelemetry.trace.span_kind")
            local otlp_exporter_new = require("opentelemetry.trace.exporter.otlp").new
            local resource_new = require("opentelemetry.resource").new
            local attr = require("opentelemetry.attribute")
            local context_storage = require("opentelemetry.context_storage")
            local context = require("opentelemetry.context").new(context_storage)
            local trace_context = require("opentelemetry.trace.propagation.trace_context")
            local carrier_new = require("opentelemetry.trace.propagation.carrier").new
            local exporter_client_new = require("opentelemetry.trace.exporter.http_client").new

            -- create exporter
            local exporter = otlp_exporter_new(exporter_client_new("otel-collector:4317", 3))
            -- create span processor
            local batch_span_processor = batch_span_processor_new(exporter, {shared_dict_queue="queue"})
            -- create tracer provider
            local tp = tracer_provider_new(batch_span_processor,
                    {resource = resource_new(attr.string("service.name", "openresty"))})
            -- create tracer
            local tracer = tp:tracer("opentelemetry-lua")

            local carrier = carrier_new()
            -- extract trace context from the headers of downstream HTTP request
            context = trace_context.extract(context, carrier)

            local context, span = tracer:start(context, "access_by_lua_block", {
                kind = span_kind.internal,
            })
            context:attach()

            -- inject trace context into the headers of upstream HTTP request
            trace_context.inject(context, carrier)
        }

        proxy_pass http://test-server:80;

        log_by_lua_block {
            local context_storage = require("opentelemetry.context_storage")
            local context = require("opentelemetry.context").new(context_storage)
            -- get span from current context
            context:current():span():finish()
        }
    }
}